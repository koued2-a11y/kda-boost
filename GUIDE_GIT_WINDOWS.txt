╔════════════════════════════════════════════════════════════════════════════╗
║                                                                            ║
║              📦 INSTALLER ET UTILISER GIT SUR WINDOWS 📦                 ║
║                                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                         🎯 QU'EST-CE QUE GIT ?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Git est un outil de gestion de versions qui permet de :
   ✅ Sauvegarder l'historique de votre code
   ✅ Collaborer avec d'autres développeurs
   ✅ Déployer facilement sur GitHub, Vercel, etc.
   ✅ Revenir en arrière si besoin


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    📥 MÉTHODE 1 : INSTALLATION AUTOMATIQUE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Utilisez Winget (gestionnaire de paquets Windows) :


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 1 : Vérifier si Winget est installé                            │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   Dans PowerShell :
   
   winget --version
   
   ✅ Si vous voyez un numéro de version : Winget est installé !
   ❌ Si erreur : Passez à la Méthode 2


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 2 : Installer Git avec Winget                                  │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   Double-cliquez sur : INSTALLER_GIT.bat
   
   OU tapez dans PowerShell :
   
   winget install --id Git.Git -e --source winget
   
   → Attendez l'installation... ⏳
   → ✅ Git est installé !


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 3 : Redémarrer PowerShell                                      │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   ⚠️ IMPORTANT : Fermez et réouvrez PowerShell !
   
   Ensuite, vérifiez :
   
   git --version
   
   → Vous devriez voir : git version 2.x.x
   → ✅ Git fonctionne !


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    📥 MÉTHODE 2 : INSTALLATION MANUELLE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 1 : Télécharger Git                                            │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Allez sur : https://git-scm.com/download/win
   
   2. Le téléchargement commence automatiquement
      (Fichier : Git-x.xx.x-64-bit.exe)
   
   3. Attendez la fin du téléchargement


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 2 : Installer Git                                              │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Double-cliquez sur Git-x.xx.x-64-bit.exe
   
   2. Cliquez "Next" plusieurs fois (acceptez les options par défaut)
   
   3. IMPORTANT : À "Adjusting your PATH environment"
      → Sélectionnez "Git from the command line and also from 3rd-party"
   
   4. Continuez à cliquer "Next" jusqu'à "Install"
   
   5. Cliquez "Install"
   
   6. Attendez... ⏳
   
   7. Cliquez "Finish"
   
   8. ✅ Git est installé !


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 3 : Vérifier l'installation                                    │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Fermez et réouvrez PowerShell (important !)
   
   2. Tapez :
      
      git --version
   
   3. Vous devriez voir :
      
      git version 2.43.0 (ou similaire)
   
   4. ✅ Git fonctionne !


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    ⚙️ CONFIGURATION INITIALE DE GIT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Configurez votre nom et email (utilisés pour les commits) :


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  Dans PowerShell, tapez ces commandes :                               │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Votre nom :
      
      git config --global user.name "Votre Nom"
      
      Exemple : git config --global user.name "KOUED"
   
   2. Votre email :
      
      git config --global user.email "votre.email@example.com"
      
      Exemple : git config --global user.email "koued@gmail.com"
   
   3. Vérifier :
      
      git config --list
   
   4. ✅ Git est configuré !


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    📚 COMMANDES GIT ESSENTIELLES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


┌─────────────────────────────────────────────────────────────────────┐
│  COMMANDE           │  DESCRIPTION                                  │
├─────────────────────┼───────────────────────────────────────────────┤
│  git init           │  Créer un nouveau dépôt Git                   │
│  git status         │  Voir l'état des fichiers                     │
│  git add .          │  Ajouter tous les fichiers                    │
│  git add fichier    │  Ajouter un fichier spécifique                │
│  git commit -m "…"  │  Sauvegarder les changements                  │
│  git log            │  Voir l'historique                            │
│  git remote add     │  Lier à un repo distant (GitHub)              │
│  git push           │  Envoyer vers GitHub                          │
│  git pull           │  Récupérer depuis GitHub                      │
│  git clone URL      │  Télécharger un projet GitHub                 │
└─────────────────────┴───────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    🚀 UTILISER GIT POUR KDA-BOOST
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 1 : Initialiser Git dans votre projet                          │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   Dans PowerShell, allez dans votre dossier :
   
   cd C:\Users\KOUED\kda-boost-app
   
   Puis initialisez Git :
   
   git init
   
   → ✅ Dépôt Git créé !


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 2 : Ajouter tous les fichiers                                  │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   git add .
   
   → Tous les fichiers sont ajoutés (sauf ceux dans .gitignore)


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 3 : Créer un commit (sauvegarde)                               │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   git commit -m "Initial commit - KDA-Boost"
   
   → ✅ Commit créé !


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 4 : Créer un repo sur GitHub                                   │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Allez sur : https://github.com/new
   
   2. Repository name : kda-boost
   
   3. Cliquez "Create repository"
   
   4. GitHub vous donne des instructions
      → Suivez la section "…or push an existing repository"


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  ÉTAPE 5 : Lier à GitHub et pousser                                   │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   Copiez l'URL de votre repo GitHub, puis :
   
   git remote add origin https://github.com/VOTRE_USERNAME/kda-boost.git
   
   git branch -M main
   
   git push -u origin main
   
   → Si demandé, connectez-vous à GitHub
   → ✅ Votre code est sur GitHub !


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    🔐 CONNEXION À GITHUB
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Lors du premier `git push`, vous devrez vous authentifier :


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  MÉTHODE 1 : GitHub CLI (Recommandé)                                  │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Téléchargez GitHub CLI : https://cli.github.com
   
   2. Installez-le
   
   3. Dans PowerShell :
      
      gh auth login
   
   4. Suivez les instructions (navigateur s'ouvre)
   
   5. ✅ Authentifié !


┌────────────────────────────────────────────────────────────────────────┐
│                                                                        │
│  MÉTHODE 2 : Personal Access Token                                    │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

   1. Sur GitHub : Settings → Developer settings → Personal access tokens
   
   2. Generate new token (classic)
   
   3. Cochez : repo, workflow
   
   4. Generate token
   
   5. COPIEZ LE TOKEN (vous ne le reverrez plus !)
   
   6. Lors du `git push`, collez le token comme mot de passe


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    💡 WORKFLOW QUOTIDIEN AVEC GIT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Après avoir modifié vos fichiers :


   1. Voir ce qui a changé :
      git status

   2. Ajouter les changements :
      git add .

   3. Créer un commit :
      git commit -m "Description de vos changements"

   4. Envoyer vers GitHub :
      git push

   → ✅ Vercel redéploie automatiquement !


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    ❌ PROBLÈMES COURANTS ET SOLUTIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


   PROBLÈME : "git" n'est pas reconnu
   SOLUTION : Redémarrez PowerShell après l'installation


   PROBLÈME : "Permission denied (publickey)"
   SOLUTION : Configurez SSH ou utilisez HTTPS avec token


   PROBLÈME : "Merge conflict"
   SOLUTION : Éditez le fichier, supprimez les marqueurs, puis commit


   PROBLÈME : "Your branch is behind"
   SOLUTION : git pull avant de push


   PROBLÈME : Fichiers sensibles (mot de passe) commités
   SOLUTION : Ajoutez-les à .gitignore, puis :
              git rm --cached fichier
              git commit -m "Remove sensitive file"


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    🎓 RESSOURCES POUR APPRENDRE GIT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   📚 Documentation officielle : https://git-scm.com/doc
   
   🎮 Tutoriel interactif : https://learngitbranching.js.org
   
   📖 Guide GitHub : https://docs.github.com/en/get-started
   
   🎥 Vidéos YouTube : Cherchez "git tutorial français"


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    ⚠️ ALTERNATIVE : PAS ENVIE D'INSTALLER GIT ?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Vous pouvez déployer SANS Git ! Consultez :

   📄 DEPLOIEMENT_SANS_GIT.txt   → 3 méthodes sans Git !


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


              🎊 AVEC GIT, VOTRE CODE EST SAUVEGARDÉ ET VERSIONNÉ ! 🎊


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

